package br.ufrgs.inf.dicelydone.pokergame;

import android.app.Activity;
import android.app.Fragment;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import java.util.Timer;
import java.util.TimerTask;

import br.ufrgs.inf.dicelydone.R;

/**
 * Fragment for the first round, where players roll their dice.
 *
 * <p>
 * Activities using this fragment MUST implement {@link RollingRound.EventHandler}
 *
 * <p>
 * Displays the instructions for the player.In the current prototype, waits
 * for two seconds then generates a random hand.
 *
 * <li> TODO obtain dice from the server on hybrid interaction
 * <li> TODO do we just wait for a timeout on the virtual version?
 */
public class RollingRound extends Fragment {

    /**
     * Defines the events generated by the {@link RollingRound} fragment.
     */
    public interface EventHandler {
        /**
         * Called when the dice must be rolled
         */
        void rollDice();
    }

    public static final String ARG_ROUND = "br.ufrgs.inf.dicelydone.ROUND";

    private boolean mMustRandomize = false;
    private EventHandler mCallback;

    public RollingRound() {
        // Required empty constructor
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_rolling_round, container, false);
    }


    @Override
    public void onStart() {
        super.onStart();

        if (getArguments() != null) {
            readBundle(getArguments());
        }

        mMustRandomize = false;
        Timer t = new Timer();
        t.schedule(new TimerTask() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (isResumed()) {
                            mCallback.rollDice();
                        } else {
                            mMustRandomize = true;
                        }
                    }
                });
            }
        }, 2000);
    }

    @Override
    public void onResume() {
        super.onResume();

        if (mMustRandomize) {
            mCallback.rollDice();
        }
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        // Obtain the callback from the activity
        try {
            mCallback = (EventHandler) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement RollingRound.EventHandler");
        }
    }

    private void readBundle(Bundle bundle) {
        int round = bundle.getInt(ARG_ROUND);

        TextView view = (TextView) getActivity().findViewById(R.id.instructionsView);
        view.setText(round == 1 ? R.string.instruction_roll_dice : R.string.instruction_reroll_dice);
    }

}
